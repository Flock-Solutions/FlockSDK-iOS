name: Manual Release

on:
  workflow_dispatch:
    inputs:
      bump:
        description: 'Select version bump'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
        default: patch
      release_name:
        description: 'Release title (optional)'
        required: false
        default: ''

permissions:
  contents: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest tag
        id: latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo $latest_tag
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Calculate new version
        id: new_version
        run: |
          latest=${{ steps.latest_tag.outputs.latest_tag }}
          bump=${{ github.event.inputs.bump }}

          IFS='.' read -r major minor patch <<< "$version"

          if [ "$bump" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$bump" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          new_version="$major.$minor.$patch"
          echo "new_version=$new_version" >> $GITHUB_OUTPUT

      - name: Create and push tag
        id: tag
        run: |
          VERSION=${{ steps.new_version.outputs.new_version }}
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists."
            exit 1
          fi
          git tag "$VERSION"
          git push origin "$VERSION"
          echo "tag=$VERSION" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ github.event.inputs.release_name != '' && github.event.inputs.release_name || steps.tag.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

